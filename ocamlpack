#!/bin/sh
# -*- mode: sh -*-

# command line (very primitive...)
if test $1 != "-o"; then
    echo "ocamlpack: usage: ocamlpack -o file.ml* (-intro file.odoc) (-level <n>) file1.ml* file2.ml* ..."
    exit -1
fi
shift
out=$1
shift
introfile=0
if test $1 == "-intro"; then { shift; introfile=$1; shift; }; fi
level=-1
if test $1 == "-level"; then { shift; level=$1; shift; }; fi

# extract suffix of output file
suffix=`echo "$out" | sed -e 's/.*[.]\(ml\|mli\)$/\1/g'`
if test $suffix != "ml" && test $suffix != "mli"; then
    echo "suffix of output file should be .ml or .mli";
    exit -1
fi

# prepare output
rm -f $out
if test $introfile != 0; then
    cat $introfile >>$out
fi
echo "" >>$out

# iterate on input module,
for file in $*; do
    echo "" >>$out
    suffixf=`echo "$file" | sed -e 's/.*[.]\(ml\|mli\)$/\1/g'`
    if test $suffix != $suffixf; then
	{ echo "ocamlpack: suffix .$suffix expected for file $file"; exit -1; };
    fi
    module=`echo $file | sed -e 's/\([^/]\+[/]\)*\([^/.]*\)[.]\(ml\|mli\)$/\u\2/g'`
    firstline=`head -n 1 $file`
    iscomment=`echo $firstline | sed -e 's/^\(([*][*]\).*/\1/g;s/^\([^(].*\)$/0/g'`
#    echo "iscomment=$iscomment";
    if test $iscomment == '(**'; then
	if test $level != -1; then
	    content=`echo $firstline | sed -e 's/.*([*][*]\(.*\)[*]).*/\1/g'`
	    echo '(** {% \\chapter{Module {\\tt' "$module}: $content} %} *)" >>$out;
	    echo "" >>$out; echo $firstline >>$out;
	else
	    echo $firstline >>$out;
	fi;
    fi
    if test $suffix = "ml"; then
	echo "module $module = struct" >>$out;
    else
	echo "module $module : sig" >>$out;
    fi
    if test $iscomment != "(**"; then
	echo $firstline >>$out;
    fi
    tail -n +2 $file >>$out
    echo "end" >>$out
done
