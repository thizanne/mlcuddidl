1 a\\n(* This file is part of the MLCUDDIDL Library, released under LGPL license.\n   Please read the COPYING file packaged in the distribution  *)
s/type man__tf/(** CUDD Manager *)\n\ntype d\n  (** Indicates that a CUDD manager manipulates standard ADDs with leaves of type C double *)\n/g;
s/and man__tv/type v\n  (** Indicates that a CUDD manager manipulates ``custom'' ADDs with leaves of type an [OCaml] value. A manager cannot manipulate the two types of ADDs (for garbage collection reasons *)\n/g; 
s/and man__t/type 'a t\n  (** Type of CUDD managers, where ['a] is either [d] or [v]*)/g; 
s/and reorder/\n(** Reordering method. *)\ntype reorder/g; 
s/and aggregation/\n(** Type of aggregation methods. *)\ntype aggregation/g; 
s/and lazygroup/\n(** Group type for lazy sifting. *)\ntype lazygroup/g; 
s/and vartype/\n(** Variable type. Currently used only in lazy sifting. *)\ntype vartype/g; 
s/and mtr/\n(** Is variable order inside group fixed or not ? *)\ntype mtr/g; 
s/and error/\n(** Type of error when CUDD raises an exception. *)\ntype error/g; 
s/Man.man__tf/Man.d Man.t/g;  
s/Man.man__tv/Man.v Man.t/g;  
s/Man.man__t/'a Man.t/g;  
s/man__tf/d t/g;  
s/man__tv/v t/g;  
s/man__t/'a t/g;  
s/type bdd__tf/(** Binary Decision Diagrams *)\n/g;
s/and bdd__tv//g;
s/and bdd__t/type 'a t\n  (** Abstract type for BDDs.\n\n    Objects of type ['a t] contain both the top node of the BDD and the manager to which this node belongs. ['a], which is either [Man.d] or [Man.v] indicates the kind of manager to which the node belongs. The manager can be retrieved with {!manager}.  These objects are automatically garbage collected.*)\n/g; 
s/Bdd.bdd__tf/Man.d Bdd.t/g;  
s/Bdd.bdd__tv/Man.v Bdd.t/g;  
s/Bdd.bdd__t/'a Bdd.t/g;  
s/bdd__tf/Man.d t/g;  
s/bdd__tv/Man.v t/g;  
s/bdd__t/'a t/g;  
s/type rdd__t/(** Binary Decision Diagrams with float leaves (CUDD ADDs) *)\n\ntype t\n  (** Abstract type for RDDs (that are necessarily attached to a manager of type [Man.d Man.t]).\n\n    Objects of this type contains both the top node of the ADD and the manager to which the node belongs. The manager can be retrieved with {!manager}. Objects of this type are automatically garbage collected. *)\n/g;
s/rdd__t/t/g;  
s/type idd__t/(** Binary Decision Diagrams with int leaves (based on CUDD ADDs) *)\n\ntype t\n  (** Abstract type for IDDs (that are necessarily attached to a manager of type [Man.d Man.t]).\n\n    Objects of this type contains both the top node of the ADD and the manager to which the node belongs. The manager can be retrieved with {!manager}. Objects of this type are automatically garbage collected. *)\n/g;  
s/idd__t/t/g;  
s/type vdd__t/(** Binary Decision Diagrams with OCaml value leaves (based on CUDD ADDs) *)\n\ntype 'a t\n  (** Type of VDDs (that are necessarily attached to a manager of type [Man.v Man.t]).\n\n    Objects of this type contains both the top node of the ADD and the manager to which the node belongs. The manager can be retrieved with {!manager}. Objects of this type are automatically garbage collected. *)\n/g;  
s/vdd__t/'a t/g;
s/and vdd__leaf//g;
s/vdd__leaf/'a/g;  
s/external man_/external /g;  
s/external bdd_/external /g;  
s/external rdd_/external /g;  
s/external vdd_/external /g;  
s/CUDD_//g;  
s/camlidl_\(ml2c\|c2ml\|transl\|man\|bdd\|rdd\|zdd\|vdd\)/camlidl_cudd_\1/g;  
s/transfer : 'a t -> 'a Man.t -> 'a t/transfer : 'a t -> 'b Man.t -> 'b t/g;
